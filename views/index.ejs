<!DOCTYPE html>
<html>

<head>
	<script src="https://d3js.org/d3.v7.min.js"></script>
</head>

<!-- Pull in P5.JS graphics library -->
<!-- <script
  src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.1.9/p5.min.js"
  integrity="sha512-WIklPM6qPCIp6d3fSSr90j+1unQHUOoWDS4sdTiR8gxUTnyZ8S2Mr8e10sKKJ/bhJgpAa/qG068RDkg6fIlNFA=="
  crossorigin="anonymous"
></script> -->
<script>


		const SERVERADDRESS = "http://127.0.0.1:3000";
		const margin = { top: 20, right: 30, bottom: 40, left: 50 };
		const width = 800 - margin.left - margin.right;
		const height = 400 - margin.top - margin.bottom;
		const svg = d3.select("#chart")
		.append("g")
		.attr("transform", `translate(${margin.left},${margin.top})`);


		const xScale = d3.scaleLinear().range([0, width]);
		const yScale = d3.scaleLinear().range([height, 0]);

		const line = d3.line()
			.x((d, i) => xScale(i))
			.y(d => yScale(d))
			.curve(d3.curveMonotoneX);

		svg.append("g")
			.attr("class", "x-axis")
			.attr("transform", `translate(0, ${height})`);

		svg.append("g")
			.attr("class", "y-axis");

		let data = [];

		// Initialize the line path
		svg.append("path")
		.datum(data)
		.attr("class", "line")
		.attr("fill", "none")
		.attr("stroke", "steelblue")
		.attr("stroke-width", 2);


		const updateChart = (sensorValue) => {



			// Add new data point
			data.push(sensorValue);

			// Update x and y domains
		

			begin_index = 0
			if(data.length >20) begin_index = data.length - 20

			xScale.domain([begin_index, data.length - 1]);
			yScale.domain([-1.5, 1.5]);

			// Update x-axis and y-axis
			svg.select(".x-axis").call(d3.axisBottom(xScale));
			svg.select(".y-axis").call(d3.axisLeft(yScale));

			// Update the line path
			svg.select(".line")
				.datum(data)
				.attr("d", line); // Update the path data


		};


		const getData = () => {
			fetch(SERVERADDRESS, {
				method: "POST",
				headers: {
					"Content-Type": "application/json"
				}
			})
			.then(response => response.json())
			.then(data => {
				const sensorValue = parseFloat(data.sensorValue);
				updateChart(sensorValue);
				

				// Call getData function again after a delay
				setTimeout(getData, 1000);
			})
			.catch(error => console.error(error));
		};

		// Start fetching data
		getData();
	</script> 
</body>

</html>